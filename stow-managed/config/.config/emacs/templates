fundamental-mode ;; Available everywhere

(today (format-time-string "%Y-%m-%d"))

prog-mode

(fixme (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "FIXME ")
(todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "TODO ")
(bug (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "BUG ")
(hack (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "HACK ")

latex-mode

(begin "\\begin{" (s env) "}" r> n> "\\end{" (s env) "}")
(frac "\\frac{" p "}{" q "}")
(enumerate "\\begin{enumerate}\n\\item " r> n> "\\end{enumerate}")
(itemize "\\begin{itemize}\n\\item " r> n> "\\end{itemize}")

lisp-mode emacs-lisp-mode ;; Specify multiple modes

(lambda "(lambda (" p ")" n> r> ")")

emacs-lisp-mode

(autoload ";;;###autoload")
(pt "(point)")
(lambda "(lambda (" p ")" n> r> ")")
(var "(defvar " p "\n  \"" p "\")")
(local "(defvar-local " p "\n  \"" p "\")")
(const "(defconst " p "\n  \"" p "\")")
(custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
(face "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
(group "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")")
(macro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
(alias "(defalias '" p " '" p ")")
(fun "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(iflet "(if-let (" p ")" n> r> ")")
(whenlet "(when-let (" p ")" n> r> ")")
(iflet* "(if-let* (" p ")" n> r> ")")
(whenlet* "(when-let* (" p ")" n> r> ")")
(andlet* "(and-let* (" p ")" n> r> ")")
(cond "(cond" n "(" q "))" >)
(pcase "(pcase " (p "scrutinee") n "(" q "))" >)
(let "(let (" p ")" n> r> ")")
(let* "(let* (" p ")" n> r> ")")
(rec "(letrec (" p ")" n> r> ")")
(dotimes "(dotimes (" p ")" n> r> ")")
(dolist "(dolist (" p ")" n> r> ")")
(loop "(cl-loop for " p " in " p " do" n> r> ")")
(command "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive" p ")" n> r> ")")
(advice "(defun " (p "adv" name) " (&rest app)" n> p n> "(apply app))" n>
        "(advice-add #'" (p "fun") " " (p ":around") " #'" (s name) ")")
(provide "(provide '" (file-name-base (or (buffer-file-name) (buffer-name))) ")" n
         ";;; " (file-name-nondirectory (or (buffer-file-name) (buffer-name))) " ends here" n)

text-mode

;; (calc (p "taylor(sin(x),x=0,3)" formula) n "----" n (format "%s" (calc-eval formula)))
;; (rot13 (p "plain text" text) n "----" n (rot13 text))


java-mode

(class "public class " (p (file-name-base (or (buffer-file-name) (buffer-name)))) " {" n> r> n "}")

c-mode;; :when (re-search-backward "^\\S-*$" (line-beginning-position) 'noerror)

(inc "#include <" (p (concat (file-name-base (or (buffer-file-name) (buffer-name))) ".h")) ">")
(incc "#include \"" (p (concat (file-name-base (or (buffer-file-name) (buffer-name))) ".h")) "\"")

org-mode

(quote "#+begin_quote" n> r> n> "#+end_quote")
(example "#+begin_example" n> r> n> "#+end_example")
(center "#+begin_center" n> r> n> "#+end_center")
(comment "#+begin_comment" n> r> n> "#+end_comment")
(verse "#+begin_verse" n> r> n> "#+end_verse")
(src "#+begin_src " p n> r> n> "#+end_src" :post (org-edit-src-code))
(rest "#+begin_src restclient" p n> r> n> "#+end_src" :post (org-edit-src-code))
(elisp "#+begin_src emacs-lisp" n> r> n "#+end_src" :post (org-edit-src-code))
(py "#+begin_src python" n> r> n "#+end_src" :post (org-edit-src-code))
(js "#+begin_src javascript" n> r> n "#+end_src" :post (org-edit-src-code))
(sh "#+begin_src sh" n> r> n "#+end_src" :post (org-edit-src-code))
(cpp "#+begin_src cpp :namespaces std :flags  -std=c++20 :includes <iostream> <vector>" n> r> n "#+end_src" :post (org-edit-src-code))
(C "#+begin_src C :includes <stdlib.h> <stdio.h> :flags -std=c99" n> r> n "#+end_src" :post (org-edit-src-code))
(ts "#+begin_src typescript" n> r> n "#+end_src" :post (org-edit-src-code))
(plantuml "#+begin_src plantuml :file i/"(file-name-base (or (buffer-file-name) (buffer-name)))".png :cmdline -charset UTF-8 :exports results" n> r> n "#+end_src" :post (org-edit-src-code))
(yaml "#+begin_src yaml" n> r> n "#+end_src" :post (org-edit-src-code))
(json "#+begin_src json" n> r> n "#+end_src" :post (org-edit-src-code))
(rust "#+begin_src rust" n> r> n "#+end_src" :post (org-edit-src-code))
(matplotlib "#+begin_src python :results file :exports both :session *matplotlib*" n> r> n "#+end_src" :post (org-edit-src-code))

nix-mode

(opt (p "name" name) " = mkOption {"n>"default = "(p "default" default)";"n>"type = type."q";"n>"description = "(s name)";"n>"};")

(dft "{ pkgs, config, lib, ... }:{" n> r> n> "}")

(newmodule "{ pkgs, config, lib, ... }:"n>"with lib;"n>"let"n>"file-path = builtins.split \"/\" (toString ./.); "n>"serviceName = lib.last file-path; "n>"cfg = config.services.\${serviceName}; "n>"in { "n>"options.services = { "n>"\"\${serviceName}\" = { "n>"enable = mkEnableOption \"Enables \${serviceName} service\";"n>"};"n>"};"n>"config = mkIf cfg.enable {"n>"systemd = {"n>"services = {"n>"\"\${serviceName}\"= {"n>"wantedBy = [ \"multi-user.target\" ];"n>"after = [ \"networking.target\" ];"n>"startLimitIntervalSec = 500;"n>"startLimitBurst = 5;"n>"preStart = \"\";"n>"onSuccess = [ ];"n>"onFailure = [ ];"n>"serviceConfig = {"n>"User = serviceName;"n>"RestartSec = \"5s\";"n>"WorkingDirectory = \"/var/lib/\${serviceName}\";"n>"StateDirectory = serviceName;"n>"RuntimeDirectory = serviceName;"n>"CacheDirectory = serviceName;"n>"Type = "(p "\"simple\"" type)";"n>"};"n>"script = \""q"\";"n>"postStart = \"\";"n>"};"n>"};"n>"};"n>"users.users.\"\${serviceName}\" = {"n>"description = \"\${serviceName} user\";"n>"isSystemUser = true;"n>"group = serviceName;"n>"createHome = true;"n>"};"n>"users.groups.\"\${serviceName}\" = { };"n>"};"n>"}")


go-mode

(imp "import " q)
(impn "import (" n> q n ")")

(pr "fmt.Printf(\"\\n" p "\\n%#v\\n\", " q ")")
(pl "fmt.Println(" q ")")

(db "Debug.Printf(\"\\n" p "\\n\\n%#v\\n\", " q ")")
(dl "Debug.Println(" q ")")

(lf "log.Printf(\"\\n%#v\\n\", " q ")")
(ln "log.Println(" q ")")

(str "type " p " struct {" n> q n "}")

(inf "type " p " interface {" n> q n "}")

(cnt "const " p " = " q )

(const "const (" n> p " = " q n ")")

(var "var " p " " q)

(map "map[" p "]" q)

(if "if " p " {" n> q n> "}")

(else "if " p " {" n> p n> "} else {" n> q n> "}")

(elif "if " p " {" n> p n> "} else if " p " {" n> q n> "}")

(ifen "if err != nil {" n> q n> "}")

(ifer "if err != " p " {" n> q n> "}")

(sel "select {" n> "case " p ":" n> q n> "}")

(swch "switch " p " {" n> "case " p ":" q n> "}")

(for "for " p "{" n> q n> "}")

(range "for " p ", " p " := range " p " {" n> q n> "}")

(fnc "func " p "(" p ") {" n> q n "}")

(main "func main() {" n> q n "}")

(init "func init() {" n> q n "}")

(test "func Test" p " (t *testing.T) { " n> q n "}")

clojure-mode clojurescript-mode

(pr "(prn " p ")")
(fn "(fn [" p "]" n> r> ")")
(defn "(defn " p " [" p "]" n> r> ")")
(def "(def " p ")")
(def- "(def- " p ")")
(defrec "(defrecord " p n> "[" p "]" n> r> ")")
(macro "(defmacro " p n> "[" p "]" n> r> ")")
(if "(if " p ")")
(when "(when " p ")")
(cond "(cond " p ")")
(iflet "(if-let [" p "]" n> r> ")")
(whenlet "(when-let [" p "]" n> r> ")")
(let "(let [" p "]" n> r> ")")
(dotimes "(dotimes [" p "]" n> r> ")")
(loop "(loop [" p "]" n> r> ")")
(prn "(prn " p ")")
(map "(map [" p "]" p ")")
(filter "(filter [" p "]" p ")")
(reduce "(reduce (fn [" p " " p "] " n> p ") " n> p")")
(test "(deftest " p n> "(is " p "))")
(for "(for [" p "]" p ")")
(doseq "(doseq [" p "]" p ")")
(import "(:import (" p "))")
(require "(:require [" p "])")
(main "(defn -main [& args]" n> p ")")
(opts "{:as " p " :keys [" p "] :or {" p "}}")
(try "(try" n> p n> "(catch " p "))")
(bench "(dotimes [_ 5] " n> "(time (dotimes [i 1000000]" n> p ")))")

;; Local Variables:
;; mode: lisp-data
;; outline-regexp: "[a-z]"
;; End:
